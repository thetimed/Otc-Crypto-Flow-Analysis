{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "833e6ba6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy\n",
    "import os \n",
    "import glob\n",
    "from datetime import datetime, timedelta, date\n",
    "from matplotlib import pyplot as plt\n",
    "from functools import reduce\n",
    "import statsmodels.api as smf\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2bac7bd",
   "metadata": {},
   "source": [
    "**OTC Simulated Data**<br><br>\n",
    "**Alpha Fund Stars**<br>\n",
    "    Alpha, buys before it pumps, sells before it dumps.<br>\n",
    "    Simulated for 20 trades<br>\n",
    "    Buys before the top 10 pumps, and sells before the top 10 dumps, in 1 period<br>\n",
    "    Size Varies from (20,60)<br><br><br><br>\n",
    "**Billy the Beta Miner**<br>\n",
    "    Miner, who sells constant size, 25% of selling every time period<br>\n",
    "    Size varies from (48,52)<br>\n",
    "    P(selling) =25%<br>\n",
    "    <br><br>\n",
    "**Charlie the Chad**<br>\n",
    "    Chad who trades like a maniac and frequently<br>\n",
    "    Size varies from (20,60)<br>\n",
    "    P(buy) = 40%, P(sell) = 43%, P(No trade) = 17%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "4e9ac11b",
   "metadata": {},
   "outputs": [],
   "source": [
    "path = 'C://Users//TM//Documents//Python Scripts//Binance download//OTC//'                     \n",
    "     # advisable to use os.path.join as this makes concatenation OS independent\n",
    "filename = 'OTC Simulated details.csv'    \n",
    "f = path + filename\n",
    "df_otc_file = (pd.read_csv(f))\n",
    "df_otc_file.sort_values(by=['Time period'])\n",
    "# Replace NaN with 0 \n",
    "df_otc_file = df_otc_file.fillna(0)\n",
    "#delete if buy and sell are both = 0, because this means that they did not make any trade at all \n",
    "#Find standard deviation in size and standard deviation in frequency of trading\n",
    "\n",
    "#df_otc_file = df_otc_file[(df_otc_file.Buy = 0) & (df_otc_file.Sell =0)]\n",
    "\n",
    "df_otc_file = df_otc_file[(df_otc_file.Buy != 0) | (df_otc_file.Sell !=0)]\n",
    "df_otc_file = df_otc_file.sort_values(by=['Time period'])\n",
    "Counterparties = df_otc_file['Counterparty'].unique()\n",
    "df_otc_file['Size Difference in transaction'] = df_otc_file.groupby('Counterparty')['Size'].diff()\n",
    "df_otc_file['Time Difference in transaction'] = df_otc_file.groupby('Counterparty')['Time period'].diff()\n",
    "df_otc_file['Size Difference in transaction'] = df_otc_file.groupby('Counterparty')['Size'].diff()\n",
    "df_otc_file = df_otc_file.sort_values(by=['Counterparty','Time period'])\n",
    "df_otc_file['std in size'] = df_otc_file['Size Difference in transaction']\\\n",
    ".rolling(len(df_otc_file.groupby('Counterparty')['Size']\\\n",
    "            ),min_periods=2).std()\n",
    "\n",
    "#df_plot = df_otc_file.groupby('Counterparty', as_index=False)['Size'].mean()\n",
    "x = ['Size', 'Time Difference in transaction']\n",
    "#st_dev = prices.groupby('ticker')['lret'].agg(['mean', 'std'])\n",
    "df_plot = df_otc_file.groupby('Counterparty', as_index=False)['Size'].agg(['std','mean'])\n",
    "df_plot_2 = df_otc_file.groupby('Counterparty', as_index=False)['Time Difference in transaction'].agg(['std'])\n",
    "df_plot=df_plot.merge(df_plot_2, on='Counterparty', how='left')\n",
    "columns_for_plotting = ['size std', 'mean size', 'Trade Frequency std']\n",
    "\n",
    "\n",
    "df_plot=df_plot.rename(columns = {'std_x':'size std', 'mean':'mean size','std_y':'Trade Frequency std'})\n",
    "\n",
    "df_plot = df_plot.round(1)\n",
    "\n",
    "#ax = df_plot.plot.bar(ylabel = \"Standard deviation / Size\")\n",
    "#df_otc_file['Time Difference in transaction'] = df_otc_file.groupby('Counterparty')['Time period'].diff()\n",
    "\n",
    "#ax = df_final.plot.bar(x='Counterparty',ylabel = \"Standard deviation\",\\\n",
    " #                 y=Standard_deviation_plot)\n",
    "\n",
    "#for container in ax.containers:\n",
    "#    ax.bar_label(container)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "d9bd3b81",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_plot = df_otc_file.groupby('Counterparty', as_index=False)['Size'].agg(['std','mean']).reset_index()\n",
    "df_plot = df_otc_file.groupby('Counterparty', as_index=False)['Size'].agg(['std','mean']).reset_index()\n",
    "df_plot_2 = df_otc_file.groupby('Counterparty', as_index=False)['Time Difference in transaction'].agg(['std']).reset_index()\n",
    "df_plot_3 = df_otc_file.groupby('Counterparty', as_index=False)['Buy'].sum()\n",
    "df_plot_4 = df_otc_file.groupby('Counterparty', as_index=False)['Sell'].sum()\n",
    "\n",
    "x = ['Counterparty','Standard deviation in size', 'Average Size']\n",
    "\n",
    "df_plot = df_plot.set_axis(x,axis =1)\n",
    "y = ['Counterparty','Standard deviation in Frequency']\n",
    "z = ['Counterparty','Number of buys']\n",
    "k = ['Counterparty','Number of sells']\n",
    "\n",
    "df_plot_2 = df_plot_2.set_axis(y,axis =1)\n",
    "df_plot_3 = df_plot_3.set_axis(z,axis =1)\n",
    "df_plot_4 = df_plot_4.set_axis(k,axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "fdedad88",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = [df_plot,df_plot_2,df_plot_3,df_plot_4]\n",
    "dfs = [df_plot,df_plot_2,df_plot_3,df_plot_4]\n",
    "\n",
    "df_final = reduce(lambda left,right: pd.merge(left,right,on='Counterparty'), dfs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "672ff5a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Counterparty</th>\n",
       "      <th>Standard deviation in size</th>\n",
       "      <th>Average Size</th>\n",
       "      <th>Standard deviation in Frequency</th>\n",
       "      <th>Number of buys</th>\n",
       "      <th>Number of sells</th>\n",
       "      <th>% of buy</th>\n",
       "      <th>% of sells</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alpha Fund Stars</td>\n",
       "      <td>10.6</td>\n",
       "      <td>45.0</td>\n",
       "      <td>108.4</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Billy the Beta Miner</td>\n",
       "      <td>1.4</td>\n",
       "      <td>50.0</td>\n",
       "      <td>3.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>603.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Charlie the Chad</td>\n",
       "      <td>11.8</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>987.0</td>\n",
       "      <td>980.0</td>\n",
       "      <td>50.2</td>\n",
       "      <td>49.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Counterparty  Standard deviation in size  Average Size  \\\n",
       "0      Alpha Fund Stars                        10.6          45.0   \n",
       "1  Billy the Beta Miner                         1.4          50.0   \n",
       "2      Charlie the Chad                        11.8          40.0   \n",
       "\n",
       "   Standard deviation in Frequency  Number of buys  Number of sells  % of buy  \\\n",
       "0                            108.4            20.0             20.0      50.0   \n",
       "1                              3.2             0.0            603.0       0.0   \n",
       "2                              0.5           987.0            980.0      50.2   \n",
       "\n",
       "   % of sells  \n",
       "0        50.0  \n",
       "1       100.0  \n",
       "2        49.8  "
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final['% of buy'] = (100* df_final[ 'Number of buys'] / (df_final['Number of buys'] + df_final['Number of sells']))\n",
    "df_final['% of sells'] = (100* df_final[ 'Number of sells'] / (df_final['Number of buys'] + df_final['Number of sells']))\n",
    "\n",
    "df_final = df_final.round(1)\n",
    "df_final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71b331ce",
   "metadata": {},
   "source": [
    "**Stats to plot**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "538aa132",
   "metadata": {},
   "outputs": [],
   "source": [
    "Standard_deviation_plot = ['Standard deviation in size', 'Standard deviation in Frequency']\n",
    "absolute_num_plot = ['Average Size','Number of buys','Number of sells']\n",
    "percentages_plot = ['% of buy','% of sells']\n",
    "#plot number of buys, number of sells, average buy size, average sell size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "eca452dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df_final.plot.bar(x='Counterparty',ylabel = \"Standard deviation\",\\\n",
    "                  y=Standard_deviation_plot)\n",
    "\n",
    "for container in ax.containers:\n",
    "    ax.bar_label(container)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "b540cf58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df_final.plot.bar(x='Counterparty',ylabel = \"Absolute Number\",\\\n",
    "                  y=absolute_num_plot)\n",
    "\n",
    "\n",
    "for container in ax.containers:\n",
    "    ax.bar_label(container)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "81ce0fea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df_final.plot.bar(x='Counterparty',ylabel = \"Absolute Number\",\\\n",
    "                  y=percentages_plot)\n",
    "\n",
    "\n",
    "for container in ax.containers:\n",
    "    ax.bar_label(container)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "10dd2658",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Counterparty</th>\n",
       "      <th>Standard deviation in size</th>\n",
       "      <th>Average Size</th>\n",
       "      <th>Standard deviation in Frequency</th>\n",
       "      <th>Number of buys</th>\n",
       "      <th>Number of sells</th>\n",
       "      <th>% of buy</th>\n",
       "      <th>% of sells</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alpha Fund Stars</td>\n",
       "      <td>10.6</td>\n",
       "      <td>45.0</td>\n",
       "      <td>108.4</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Billy the Beta Miner</td>\n",
       "      <td>1.4</td>\n",
       "      <td>50.0</td>\n",
       "      <td>3.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>603.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Charlie the Chad</td>\n",
       "      <td>11.8</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>987.0</td>\n",
       "      <td>980.0</td>\n",
       "      <td>50.2</td>\n",
       "      <td>49.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Counterparty  Standard deviation in size  Average Size  \\\n",
       "0      Alpha Fund Stars                        10.6          45.0   \n",
       "1  Billy the Beta Miner                         1.4          50.0   \n",
       "2      Charlie the Chad                        11.8          40.0   \n",
       "\n",
       "   Standard deviation in Frequency  Number of buys  Number of sells  % of buy  \\\n",
       "0                            108.4            20.0             20.0      50.0   \n",
       "1                              3.2             0.0            603.0       0.0   \n",
       "2                              0.5           987.0            980.0      50.2   \n",
       "\n",
       "   % of sells  \n",
       "0        50.0  \n",
       "1       100.0  \n",
       "2        49.8  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "875b2b2f",
   "metadata": {},
   "source": [
    "**Downloading Binance data** <br><br>\n",
    "URL:https://github.com/binance/binance-public-data/tree/master/python<br><br>\n",
    "<br><br>\n",
    "\n",
    "**To compare what happened in the market once transaction occurs, we use data from binance**\n",
    "\n",
    "<br><br>\n",
    "\n",
    "\n",
    "<br><br>\n",
    "python download-kline.py -s ETHUSDT -startDate 2021-01-01 -endDate 2022-01-01 -i 4h<br>\n",
    "\n",
    "Start from 2021 to 2022, 4h interval, with the following values\n",
    "<br><br>\n",
    "\"Open time\",\" Open\",\" High\",\"Low\",\"Close\",\"Volume\",\"Close time\",<br>\"Quote asset volume\",\"Number of trades\",\"Taker buy base asset volume\",<br> \"Taker buy quote asset volume\",\"Ignore\"<br><br>\n",
    "\n",
    "plot % change in 1 period, % change in 3 period, % change in 5 period <br>\n",
    "plot % change in after 1 period, % change in after 3 period, % change in after 5 period"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "1c28e6d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#start of time series data from binance\n",
    "\n",
    "path = 'C:\\\\Users\\\\TM\\\\Documents\\\\Python Scripts\\\\Binance download\\\\python\\\\data\\\\spot\\\\monthly\\\\klines\\\\ETHUSDT\\\\4h\\\\2021-01-01_2022-01-01'                     # use your path\n",
    "all_files = glob.glob(os.path.join(path, \"*.csv\"))     # advisable to use os.path.join as this makes concatenation OS independent\n",
    "df_from_each_file = (pd.read_csv(f, header = None) for f in all_files)\n",
    "concatenated_df   = pd.concat(df_from_each_file, ignore_index=True, axis = 0,)\n",
    "# Finally, the files are joined\n",
    "#print(df)\n",
    "\n",
    "x = [\"Open time\",\" Open\",\" High\",\"Low\",\"Close\",\"Volume\",\"Close time\",\"Quote asset volume\",\"Number of trades\",\"Taker buy base asset volume\",\n",
    "           \"Taker buy quote asset volume\",\"Ignore\"]\n",
    "concatenated_df.columns = x\n",
    "concatenated_df['Date_time'] = pd.to_datetime(concatenated_df['Open time'], unit='ms')\n",
    "concatenated_df['% change in 1 period']=concatenated_df['Close'].pct_change()*100\n",
    "concatenated_df['% change in 3 period']=concatenated_df['Close'].pct_change(3)*100\n",
    "concatenated_df['% change in 5 period']=concatenated_df['Close'].pct_change(5)*100\n",
    "\n",
    "concatenated_df['% change in after 1 period']= concatenated_df['% change in 1 period'].shift(-1)\n",
    "concatenated_df['% change in after 3 period']= concatenated_df['% change in 3 period'].shift(-3)\n",
    "concatenated_df['% change in after 5 period']= concatenated_df['% change in 5 period'].shift(-5)\n",
    "concatenated_df.insert(1, 'Time period', range(1, len(concatenated_df)+1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "1919eae2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Eth Line chart'>"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "concatenated_df.plot('Date_time', 'Close', xlabel = \"Eth Line chart\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "024b899a",
   "metadata": {},
   "source": [
    "**Join with the data from our OTC flows**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "0e1df31b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Charlie the Chad', nan, 'Billy the Beta Miner',\n",
       "       'Alpha Fund Stars'], dtype=object)"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#now we need to join the data from mining with this time series data that we have \n",
    "Regression_data = concatenated_df.merge(df_otc_file, on='Time period', how='left', indicator=False)\n",
    "Regression_data.Counterparty.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "4d1db319",
   "metadata": {},
   "outputs": [],
   "source": [
    "Regression_data['dummy variable_buy'] = np.where(Regression_data['Buy'] == 1, 1, 0)\n",
    "Regression_data['dummy variable_sell'] = np.where(Regression_data['Sell'] == 1, 1, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42558ad5",
   "metadata": {},
   "source": [
    "<font size=\"6\">\n",
    "**Billy the Beta Miner**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "f2714762",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Regression_data_Billy = Regression_data.loc[Regression_data['Counterparty'] == 'Billy the Beta Miner']\n",
    "Regression_data_Billy_buy = Regression_data_Billy.loc[Regression_data['dummy variable_buy'] == 1]\n",
    "ax1 = Regression_data_Billy_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 1 period'])\n",
    "Regression_data_Billy_sell = Regression_data_Billy.loc[Regression_data['dummy variable_sell'] == 1]\n",
    "ax2 = Regression_data_Billy_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 1 period'])\n",
    "ax3 = Regression_data_Billy_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 3 period'])\n",
    "Regression_data_Billy_sell = Regression_data_Billy.loc[Regression_data['dummy variable_buy'] != 1]\n",
    "ax4 = Regression_data_Billy_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 3 period'])\n",
    "ax5 = Regression_data_Billy_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 5 period'])\n",
    "Regression_data_Billy_sell = Regression_data_Billy.loc[Regression_data['dummy variable_buy'] != 1]\n",
    "ax6 = Regression_data_Billy_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 5 period'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "757ca881",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                20:15:48   Log-Likelihood:                -1345.6\n",
      "No. Observations:                         603   AIC:                             2693.\n",
      "Df Residuals:                             602   BIC:                             2698.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell     0.0198      0.092      0.216      0.829      -0.161       0.200\n",
      "==============================================================================\n",
      "Omnibus:                       65.303   Durbin-Watson:                   2.188\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              166.876\n",
      "Skew:                          -0.562   Prob(JB):                     5.80e-37\n",
      "Kurtosis:                       5.319   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 1 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>20:15:48</td>          <th>  Log-Likelihood:    </th> <td> -1345.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   603</td>           <th>  AIC:               </th> <td>   2693.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   602</td>           <th>  BIC:               </th> <td>   2698.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>    0.0198</td> <td>    0.092</td> <td>    0.216</td> <td> 0.829</td> <td>   -0.161</td> <td>    0.200</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>65.303</td> <th>  Durbin-Watson:     </th> <td>   2.188</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 166.876</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.562</td> <th>  Prob(JB):          </th> <td>5.80e-37</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.319</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                20:15:48   Log-Likelihood:                -1345.6\n",
       "No. Observations:                         603   AIC:                             2693.\n",
       "Df Residuals:                             602   BIC:                             2698.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell     0.0198      0.092      0.216      0.829      -0.161       0.200\n",
       "==============================================================================\n",
       "Omnibus:                       65.303   Durbin-Watson:                   2.188\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              166.876\n",
       "Skew:                          -0.562   Prob(JB):                     5.80e-37\n",
       "Kurtosis:                       5.319   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.api as smf\n",
    "x= Regression_data_Billy['dummy variable_sell']\n",
    "y = Regression_data_Billy['% change in after 1 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()\n",
    "#result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "#print(result.summary())\n",
    "#result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "2c63767e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                20:15:48   Log-Likelihood:                -1345.6\n",
      "No. Observations:                         603   AIC:                             2693.\n",
      "Df Residuals:                             602   BIC:                             2698.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell     0.0198      0.092      0.216      0.829      -0.161       0.200\n",
      "==============================================================================\n",
      "Omnibus:                       65.303   Durbin-Watson:                   2.188\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              166.876\n",
      "Skew:                          -0.562   Prob(JB):                     5.80e-37\n",
      "Kurtosis:                       5.319   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 1 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>20:15:48</td>          <th>  Log-Likelihood:    </th> <td> -1345.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   603</td>           <th>  AIC:               </th> <td>   2693.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   602</td>           <th>  BIC:               </th> <td>   2698.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>    0.0198</td> <td>    0.092</td> <td>    0.216</td> <td> 0.829</td> <td>   -0.161</td> <td>    0.200</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>65.303</td> <th>  Durbin-Watson:     </th> <td>   2.188</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 166.876</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.562</td> <th>  Prob(JB):          </th> <td>5.80e-37</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.319</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                20:15:48   Log-Likelihood:                -1345.6\n",
       "No. Observations:                         603   AIC:                             2693.\n",
       "Df Residuals:                             602   BIC:                             2698.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell     0.0198      0.092      0.216      0.829      -0.161       0.200\n",
       "==============================================================================\n",
       "Omnibus:                       65.303   Durbin-Watson:                   2.188\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              166.876\n",
       "Skew:                          -0.562   Prob(JB):                     5.80e-37\n",
       "Kurtosis:                       5.319   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Billy['dummy variable_sell']\n",
    "y = Regression_data_Billy['% change in after 1 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "d71e4d1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 3 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                20:15:52   Log-Likelihood:                -1650.4\n",
      "No. Observations:                         602   AIC:                             3303.\n",
      "Df Residuals:                             601   BIC:                             3307.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell     0.1464      0.153      0.956      0.339      -0.154       0.447\n",
      "==============================================================================\n",
      "Omnibus:                       30.682   Durbin-Watson:                   1.704\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               89.676\n",
      "Skew:                          -0.123   Prob(JB):                     3.37e-20\n",
      "Kurtosis:                       4.875   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 3 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>20:15:52</td>          <th>  Log-Likelihood:    </th> <td> -1650.4</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   602</td>           <th>  AIC:               </th> <td>   3303.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   601</td>           <th>  BIC:               </th> <td>   3307.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>    0.1464</td> <td>    0.153</td> <td>    0.956</td> <td> 0.339</td> <td>   -0.154</td> <td>    0.447</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>30.682</td> <th>  Durbin-Watson:     </th> <td>   1.704</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  89.676</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.123</td> <th>  Prob(JB):          </th> <td>3.37e-20</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.875</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 3 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                20:15:52   Log-Likelihood:                -1650.4\n",
       "No. Observations:                         602   AIC:                             3303.\n",
       "Df Residuals:                             601   BIC:                             3307.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell     0.1464      0.153      0.956      0.339      -0.154       0.447\n",
       "==============================================================================\n",
       "Omnibus:                       30.682   Durbin-Watson:                   1.704\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               89.676\n",
       "Skew:                          -0.123   Prob(JB):                     3.37e-20\n",
       "Kurtosis:                       4.875   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Billy['dummy variable_sell']\n",
    "y = Regression_data_Billy['% change in after 3 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "d1a06df5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                20:16:12   Log-Likelihood:                -1841.6\n",
      "No. Observations:                         602   AIC:                             3685.\n",
      "Df Residuals:                             601   BIC:                             3690.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell     0.4230      0.210      2.011      0.045       0.010       0.836\n",
      "==============================================================================\n",
      "Omnibus:                       51.894   Durbin-Watson:                   1.404\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              261.301\n",
      "Skew:                           0.100   Prob(JB):                     1.82e-57\n",
      "Kurtosis:                       6.221   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 5 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>20:16:12</td>          <th>  Log-Likelihood:    </th> <td> -1841.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   602</td>           <th>  AIC:               </th> <td>   3685.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   601</td>           <th>  BIC:               </th> <td>   3690.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>    0.4230</td> <td>    0.210</td> <td>    2.011</td> <td> 0.045</td> <td>    0.010</td> <td>    0.836</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>51.894</td> <th>  Durbin-Watson:     </th> <td>   1.404</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 261.301</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.100</td> <th>  Prob(JB):          </th> <td>1.82e-57</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.221</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                20:16:12   Log-Likelihood:                -1841.6\n",
       "No. Observations:                         602   AIC:                             3685.\n",
       "Df Residuals:                             601   BIC:                             3690.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell     0.4230      0.210      2.011      0.045       0.010       0.836\n",
       "==============================================================================\n",
       "Omnibus:                       51.894   Durbin-Watson:                   1.404\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              261.301\n",
       "Skew:                           0.100   Prob(JB):                     1.82e-57\n",
       "Kurtosis:                       6.221   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Billy['dummy variable_sell']\n",
    "y = Regression_data_Billy['% change in after 5 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "a21bbed8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.01984943293019543, 0.14637587148902537, 0.4230288876093976]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=Regression_data_Billy['% change in after 1 period'].mean()\n",
    "b=Regression_data_Billy['% change in after 3 period'].mean()\n",
    "c=Regression_data_Billy['% change in after 5 period'].mean()\n",
    "\n",
    "Reg_Billy = [a,b,c]\n",
    "Reg_Billy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e86779c",
   "metadata": {},
   "source": [
    "<font size=\"6\">\n",
    "**Alpha**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "67f0ce1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Regression_data_Alpha = Regression_data.loc[Regression_data['Counterparty'] == 'Alpha Fund Stars']\n",
    "Regression_data_Alpha_buy = Regression_data_Alpha.loc[Regression_data['dummy variable_buy'] == 1]\n",
    "ax1 = Regression_data_Alpha_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 1 period'])\n",
    "Regression_data_Alpha_sell = Regression_data_Alpha.loc[Regression_data['dummy variable_buy'] == 0]\n",
    "ax2 = Regression_data_Alpha_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 1 period'])\n",
    "\n",
    "ax3 = Regression_data_Alpha_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 3 period'])\n",
    "Regression_data_Alpha_sell = Regression_data_Alpha.loc[Regression_data['dummy variable_buy'] == 0]\n",
    "ax4 = Regression_data_Alpha_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 3 period'])\n",
    "\n",
    "ax5 = Regression_data_Alpha_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 5 period'])\n",
    "Regression_data_Alpha_sell = Regression_data_Alpha.loc[Regression_data['dummy variable_buy'] == 0]\n",
    "ax6 = Regression_data_Alpha_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 5 period'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d254d62",
   "metadata": {},
   "source": [
    "**Alpha:<br><br> Run for buy, after 1 period, after 3 period, after 5 period**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "1d689e46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                14:57:47   Log-Likelihood:                -28.281\n",
      "No. Observations:                          20   AIC:                             58.56\n",
      "Df Residuals:                              19   BIC:                             59.56\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "dummy variable_buy     8.6221      0.228     37.767      0.000       8.144       9.100\n",
      "==============================================================================\n",
      "Omnibus:                        2.335   Durbin-Watson:                   1.172\n",
      "Prob(Omnibus):                  0.311   Jarque-Bera (JB):                1.937\n",
      "Skew:                           0.681   Prob(JB):                        0.380\n",
      "Kurtosis:                       2.315   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 1 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>14:57:47</td>          <th>  Log-Likelihood:    </th> <td> -28.281</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>    20</td>           <th>  AIC:               </th> <td>   58.56</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>    19</td>           <th>  BIC:               </th> <td>   59.56</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_buy</th> <td>    8.6221</td> <td>    0.228</td> <td>   37.767</td> <td> 0.000</td> <td>    8.144</td> <td>    9.100</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.335</td> <th>  Durbin-Watson:     </th> <td>   1.172</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.311</td> <th>  Jarque-Bera (JB):  </th> <td>   1.937</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.681</td> <th>  Prob(JB):          </th> <td>   0.380</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.315</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                14:57:47   Log-Likelihood:                -28.281\n",
       "No. Observations:                          20   AIC:                             58.56\n",
       "Df Residuals:                              19   BIC:                             59.56\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "dummy variable_buy     8.6221      0.228     37.767      0.000       8.144       9.100\n",
       "==============================================================================\n",
       "Omnibus:                        2.335   Durbin-Watson:                   1.172\n",
       "Prob(Omnibus):                  0.311   Jarque-Bera (JB):                1.937\n",
       "Skew:                           0.681   Prob(JB):                        0.380\n",
       "Kurtosis:                       2.315   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Alpha_buy['dummy variable_buy']\n",
    "y = Regression_data_Alpha_buy['% change in after 1 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "462dd849",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 3 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                14:59:36   Log-Likelihood:                -62.264\n",
      "No. Observations:                          20   AIC:                             126.5\n",
      "Df Residuals:                              19   BIC:                             127.5\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "dummy variable_buy    10.6204      1.249      8.506      0.000       8.007      13.234\n",
      "==============================================================================\n",
      "Omnibus:                        2.705   Durbin-Watson:                   2.025\n",
      "Prob(Omnibus):                  0.259   Jarque-Bera (JB):                2.040\n",
      "Skew:                          -0.637   Prob(JB):                        0.361\n",
      "Kurtosis:                       2.092   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 3 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>14:59:36</td>          <th>  Log-Likelihood:    </th> <td> -62.264</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>    20</td>           <th>  AIC:               </th> <td>   126.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>    19</td>           <th>  BIC:               </th> <td>   127.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_buy</th> <td>   10.6204</td> <td>    1.249</td> <td>    8.506</td> <td> 0.000</td> <td>    8.007</td> <td>   13.234</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.705</td> <th>  Durbin-Watson:     </th> <td>   2.025</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.259</td> <th>  Jarque-Bera (JB):  </th> <td>   2.040</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.637</td> <th>  Prob(JB):          </th> <td>   0.361</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.092</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 3 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                14:59:36   Log-Likelihood:                -62.264\n",
       "No. Observations:                          20   AIC:                             126.5\n",
       "Df Residuals:                              19   BIC:                             127.5\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "dummy variable_buy    10.6204      1.249      8.506      0.000       8.007      13.234\n",
       "==============================================================================\n",
       "Omnibus:                        2.705   Durbin-Watson:                   2.025\n",
       "Prob(Omnibus):                  0.259   Jarque-Bera (JB):                2.040\n",
       "Skew:                          -0.637   Prob(JB):                        0.361\n",
       "Kurtosis:                       2.092   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Alpha_buy['dummy variable_buy']\n",
    "y = Regression_data_Alpha_buy['% change in after 3 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "371c4953",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 5 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:33:16   Log-Likelihood:                -64.990\n",
      "No. Observations:                          20   AIC:                             132.0\n",
      "Df Residuals:                              19   BIC:                             133.0\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "dummy variable_buy    10.5049      1.431      7.341      0.000       7.510      13.500\n",
      "==============================================================================\n",
      "Omnibus:                        1.826   Durbin-Watson:                   1.658\n",
      "Prob(Omnibus):                  0.401   Jarque-Bera (JB):                1.033\n",
      "Skew:                           0.557   Prob(JB):                        0.597\n",
      "Kurtosis:                       2.987   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 5 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:33:16</td>          <th>  Log-Likelihood:    </th> <td> -64.990</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>    20</td>           <th>  AIC:               </th> <td>   132.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>    19</td>           <th>  BIC:               </th> <td>   133.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_buy</th> <td>   10.5049</td> <td>    1.431</td> <td>    7.341</td> <td> 0.000</td> <td>    7.510</td> <td>   13.500</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.826</td> <th>  Durbin-Watson:     </th> <td>   1.658</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.401</td> <th>  Jarque-Bera (JB):  </th> <td>   1.033</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.557</td> <th>  Prob(JB):          </th> <td>   0.597</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.987</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 5 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:33:16   Log-Likelihood:                -64.990\n",
       "No. Observations:                          20   AIC:                             132.0\n",
       "Df Residuals:                              19   BIC:                             133.0\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "dummy variable_buy    10.5049      1.431      7.341      0.000       7.510      13.500\n",
       "==============================================================================\n",
       "Omnibus:                        1.826   Durbin-Watson:                   1.658\n",
       "Prob(Omnibus):                  0.401   Jarque-Bera (JB):                1.033\n",
       "Skew:                           0.557   Prob(JB):                        0.597\n",
       "Kurtosis:                       2.987   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Alpha_buy['dummy variable_buy']\n",
    "y = Regression_data_Alpha_buy['% change in after 5 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "78275fdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[8.62210784086978, 10.620380256642964, 10.504878552345728]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=Regression_data_Alpha_buy['% change in after 1 period'].mean()\n",
    "b=Regression_data_Alpha_buy['% change in after 3 period'].mean()\n",
    "c=Regression_data_Alpha_buy['% change in after 5 period'].mean()\n",
    "\n",
    "Reg_Alpha = [a,b,c]\n",
    "Reg_Alpha"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eae0bfb",
   "metadata": {},
   "source": [
    "**Alpha: <br><br>Run for sell, after 1 period, after 3 period, after 5 period**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "84b96362",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 1 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:01:21   Log-Likelihood:                -28.894\n",
      "No. Observations:                          20   AIC:                             59.79\n",
      "Df Residuals:                              19   BIC:                             60.78\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell    -9.0719      0.235    -38.537      0.000      -9.565      -8.579\n",
      "==============================================================================\n",
      "Omnibus:                        7.956   Durbin-Watson:                   1.559\n",
      "Prob(Omnibus):                  0.019   Jarque-Bera (JB):                5.474\n",
      "Skew:                          -1.203   Prob(JB):                       0.0648\n",
      "Kurtosis:                       3.885   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 1 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:01:21</td>          <th>  Log-Likelihood:    </th> <td> -28.894</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>    20</td>           <th>  AIC:               </th> <td>   59.79</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>    19</td>           <th>  BIC:               </th> <td>   60.78</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>   -9.0719</td> <td>    0.235</td> <td>  -38.537</td> <td> 0.000</td> <td>   -9.565</td> <td>   -8.579</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 7.956</td> <th>  Durbin-Watson:     </th> <td>   1.559</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.019</td> <th>  Jarque-Bera (JB):  </th> <td>   5.474</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-1.203</td> <th>  Prob(JB):          </th> <td>  0.0648</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.885</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 1 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:01:21   Log-Likelihood:                -28.894\n",
       "No. Observations:                          20   AIC:                             59.79\n",
       "Df Residuals:                              19   BIC:                             60.78\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell    -9.0719      0.235    -38.537      0.000      -9.565      -8.579\n",
       "==============================================================================\n",
       "Omnibus:                        7.956   Durbin-Watson:                   1.559\n",
       "Prob(Omnibus):                  0.019   Jarque-Bera (JB):                5.474\n",
       "Skew:                          -1.203   Prob(JB):                       0.0648\n",
       "Kurtosis:                       3.885   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Alpha_sell['dummy variable_sell']\n",
    "y = Regression_data_Alpha_sell['% change in after 1 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "388bfeaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 3 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:04:59   Log-Likelihood:                -61.921\n",
      "No. Observations:                          20   AIC:                             125.8\n",
      "Df Residuals:                              19   BIC:                             126.8\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell    -7.1319      1.227     -5.811      0.000      -9.701      -4.563\n",
      "==============================================================================\n",
      "Omnibus:                        0.700   Durbin-Watson:                   1.811\n",
      "Prob(Omnibus):                  0.705   Jarque-Bera (JB):                0.048\n",
      "Skew:                          -0.076   Prob(JB):                        0.976\n",
      "Kurtosis:                       3.186   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 3 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:04:59</td>          <th>  Log-Likelihood:    </th> <td> -61.921</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>    20</td>           <th>  AIC:               </th> <td>   125.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>    19</td>           <th>  BIC:               </th> <td>   126.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>   -7.1319</td> <td>    1.227</td> <td>   -5.811</td> <td> 0.000</td> <td>   -9.701</td> <td>   -4.563</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.700</td> <th>  Durbin-Watson:     </th> <td>   1.811</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.705</td> <th>  Jarque-Bera (JB):  </th> <td>   0.048</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.076</td> <th>  Prob(JB):          </th> <td>   0.976</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.186</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 3 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:04:59   Log-Likelihood:                -61.921\n",
       "No. Observations:                          20   AIC:                             125.8\n",
       "Df Residuals:                              19   BIC:                             126.8\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell    -7.1319      1.227     -5.811      0.000      -9.701      -4.563\n",
       "==============================================================================\n",
       "Omnibus:                        0.700   Durbin-Watson:                   1.811\n",
       "Prob(Omnibus):                  0.705   Jarque-Bera (JB):                0.048\n",
       "Skew:                          -0.076   Prob(JB):                        0.976\n",
       "Kurtosis:                       3.186   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Alpha_sell['dummy variable_sell']\n",
    "y = Regression_data_Alpha_sell['% change in after 3 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "d4f65373",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:05:06   Log-Likelihood:                -74.490\n",
      "No. Observations:                          20   AIC:                             151.0\n",
      "Df Residuals:                              19   BIC:                             152.0\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell    -4.7459      2.301     -2.063      0.053      -9.562       0.070\n",
      "==============================================================================\n",
      "Omnibus:                        3.228   Durbin-Watson:                   1.210\n",
      "Prob(Omnibus):                  0.199   Jarque-Bera (JB):                1.613\n",
      "Skew:                          -0.377   Prob(JB):                        0.446\n",
      "Kurtosis:                       1.831   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 5 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:05:06</td>          <th>  Log-Likelihood:    </th> <td> -74.490</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>    20</td>           <th>  AIC:               </th> <td>   151.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>    19</td>           <th>  BIC:               </th> <td>   152.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>   -4.7459</td> <td>    2.301</td> <td>   -2.063</td> <td> 0.053</td> <td>   -9.562</td> <td>    0.070</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 3.228</td> <th>  Durbin-Watson:     </th> <td>   1.210</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.199</td> <th>  Jarque-Bera (JB):  </th> <td>   1.613</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.377</td> <th>  Prob(JB):          </th> <td>   0.446</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 1.831</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:05:06   Log-Likelihood:                -74.490\n",
       "No. Observations:                          20   AIC:                             151.0\n",
       "Df Residuals:                              19   BIC:                             152.0\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell    -4.7459      2.301     -2.063      0.053      -9.562       0.070\n",
       "==============================================================================\n",
       "Omnibus:                        3.228   Durbin-Watson:                   1.210\n",
       "Prob(Omnibus):                  0.199   Jarque-Bera (JB):                1.613\n",
       "Skew:                          -0.377   Prob(JB):                        0.446\n",
       "Kurtosis:                       1.831   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Alpha_sell['dummy variable_sell']\n",
    "y = Regression_data_Alpha_sell['% change in after 5 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "a2748425",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-9.071874337122406, -7.131896536956941, -4.7459119863430415]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=Regression_data_Alpha_sell['% change in after 1 period'].mean()\n",
    "b=Regression_data_Alpha_sell['% change in after 3 period'].mean()\n",
    "c=Regression_data_Alpha_sell['% change in after 5 period'].mean()\n",
    "\n",
    "Reg_Alpha = [a,b,c]\n",
    "Reg_Alpha"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a9a0d3b",
   "metadata": {},
   "source": [
    "<font size=\"6\">\n",
    "**Charlie the Chad**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "a42efce8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEGCAYAAACQO2mwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAfqUlEQVR4nO3deZgddZ3v8fenl2xma5IQliQ0S2SM3BigBYLogHivgAjKojDjsIzK44wI6LjgMorjCigOXL0iAwygDCgqy4MoKIKIytIJSSAEJECAJpAEDFnI2t3f+0dVk5POqT7VnVN9Dsnn9Tz1nKr6/arq27/T53xPbb9SRGBmZlZOQ60DMDOz+uUkYWZmmZwkzMwsk5OEmZllcpIwM7NMTbUOoJrGjx8fra2ttQ7DzOx1ZdasWS9FxIRyZdtUkmhtbaW9vb3WYZiZva5IeiarzIebzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy+QkYWZmmZwkzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy+QkYWZmmZwkzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy+QkYWZmmZwkzMwsU6FJQtKVkpZKeiSjXJIukbRQ0jxJ+/Uqb5T0kKRbi4zTzMzKK3pP4irgiD7KjwSmpsMZwA97lZ8NLCgkMjMzq6jQJBER9wB/66PKscA1kbgPGCtpZwBJk4D3AJcXGaOZmWWr9TmJXYHnSqY70nkA/wl8FujuawWSzpDULql92bJlhQRpZra9qnWSUJl5IeloYGlEzKq0goi4LCLaIqJtwoQJ1Y/QzGw7Vusk0QFMLpmeBCwG3gYcI2kRcD3wTkk/GfzwzMy2b7VOErcAp6RXOR0ErIiIFyLi8xExKSJagZOA30fEh2oaqZnZdqipyJVLug44FBgvqQP4CtAMEBGXArcBRwELgTXA6UXGY2Zm/VNokoiIkyuUB/DxCnXuBu6uXlRmZpZXrQ83mZlZHXOSMDOzTE4SZmaWyUnCzMwyOUmYmVkmJwkzM8vkJGFmZpmcJMzMLJOThJmZZXKSMDOzTE4SZmaWyUnCzMwyOUmYmVkmJwkzM8vkJGFmZpmcJMzMLJOThJmZZXKSMDOzTE4SZmaWyUnCzMwyOUmYmVkmJwkzM8uUK0lIOlNSS9HBmJlZfcm7J7ET8KCkn0k6QpKKDMrMzOpDriQREV8CpgJXAKcBT0j6pqQ9C4zNzMxqLPc5iYgI4MV06ARagJ9LuqCg2MzMrMaa8lSSdBZwKvAScDnwmYjYKKkBeAL4bHEhmplZreRKEsB44LiIeKZ0ZkR0Szq6+mGZmVk9yJskLgeQNKV0ZkQ8GxELqh6VmZnVhbxJ4ldAAAKGAbsDjwNvLiguMzOrA3mvbvpfETE9fZ0KHADcW2k5SVdKWirpkYxySbpE0kJJ8yTtl86fLOkuSQskzZd0dn/+KDMzq44B3XEdEbOBt+aoehVwRB/lR5JcWjsVOAP4YTq/E/i3iHgTcBDwcUnTBhKrmZkNXN6rmz5VMtkA7Acsq7RcRNwjqbWPKscC16SX194naayknSPiBeCFdB2rJC0AdgUezROvmZlVR949iVElw1CScxTHVmH7uwLPlUx3pPNekyaZfYH7q7A9MzPrh1x7EhHxVQBJo5PJWFWl7Zfr3iNeK5RGAr8AzomIlWVXIJ1BcqiKKVOmlKtiZmYDlLeDvzZJDwPzgIclzZW0fxW23wFMLpmeBCxOt9lMkiCujYhfZq0gIi6LiLaIaJswYUIVQjIzsx55DzddCfxrRLRGRCvwceC/q7D9W4BT0qucDgJWRMQLaQeCVwALIuKiKmzHzMwGIO99Eqsi4o89ExFxr6SKh5wkXQccCoyX1AF8BWhO13EpcBtwFLAQWAOcni76NuCfSPZa5qTzvhARt+WM18zMqqDPJNFz3wLwgKQfAdeRnDP4IHB3pZVHxMkVyoNkr6T3/Hspf77CzMwGUaU9ie/2mv5KyXhgZmbbtD6TREQclmclkk6NiKurE5KZmdWLaj3j2t1mmJltg6qVJHz+wMxsG1StJOHzE2Zm2yDvSZiZWaZqJYk/VWk9ZmZWR/J2yzFR0hWSfp1OT5P04Z7yiDizqADNzKx28u5JXAXcDuySTv8VOKeAeMzMrI7kTRLjI+JnQDdARHQCXYVFZWZmdSFvknhV0jjSq5h6OuMrLCozM6sLeTv4+xRJj617SvoTMAE4obCozMysLuR96NBsSX8P7E1yuevjEbGx0MjMzKzmKvUCe1xG0Rsl0dfDgMzM7PWv0p7Ee/soC8BJwsxsG1apF9jT+yo3M7NtW96b6cZJukTSbEmzJF2cXu1kZmbbsLyXwF4PLAOOJ7mqaRnw06KCMjOz+pD3EtgdIuJrJdNfl/S+AuIxM7M6kndP4i5JJ0lqSIcPAL8qMjAzM6u9SpfAriK5ikkkN9T9JC1qAFaz+TOvzcxsG1Pp6qZRgxWImZnVn7znJJDUAkwFhvXMi4h7igjKzMzqQ64kIekjwNnAJGAOcBDwF+CdhUVmZmY1l/fE9dnAW4FnIuIwYF+Sy2DNzGwbljdJrIuIdQCShkbEYySd/ZmZ2TYs7zmJDkljgZuA30paDiwuKigzM6sPebsKf386ep6ku4AxwG8Ki8rMzOpCpfskRkfESkk7lMx+OH0dCfytsMjMzKzmKu1J/A9wNDCLTTfVlb7uUWh0ZmZWU5VupjtakoC/j4hnBykmMzOrExXPSURESLoR2L+/K5d0JcmeyNKI2KdMuYCLgaOANcBpETE7LTsiLWsELo+Ib/d3+/3x8ur1dCxfy6SW4YwbObTQZSvVf3n1euYvXgkEu4wZzqsburaouzXbBJi/eAUg3rzL6C2Wr7TuhUtWMee5V5gxeSx7TRz12rx7F77E+JFDmbnnuNeW6/lbnl++hnkdr7Bk5XqmTxrDXjuOYtW6jazv7OaQvcbT8oYhr23z6WWruf3RJew4aih77zSaXcYM48FFf2P+4pWMGNLIC6+sYWhzEzMmjeGZ5WsZOaSRRS+/yl+XrGLMsGZax7+BJavW8ejzK+kmmDByCOs7g65u2H+3FroieHLpasaPGkJnNyxZsZYI2G+3Fg7cfQfuXLCU2c8u5+U16xna1EjL8CG8tHo9G7u6GdHcSEODWL2+k8YGMW7kUFav28iadV00NcPw5mbWbtjIqxuhWdAgWN9d8e0ZdAKaG6GpAbq6YX1XMr8RGDuiiTfuNJrWcSNYt7GLhUtX88qajQxpamDvnUbSOn4knV3BwqWrGdosXlq5gcUr1jJiSCNjhg9hWHMjO4xoZvGKdYwe0cy6DZ1s6OymddwIHnlhJcMbmxg/eiiTW4azsStY8MIKdhw9lImjhzNiSCOTW0Ywclgzq9dtZF3J/8eP/7KI+5/+GwfuvgP/NLOV5a9u4Pb5L7JmQyeTWkYwalgzAAuXruKxF1ex/24tHLffJOY8u5w7Hl3CzD12YPcJo7b4DOwyZhiLV6wDgjfvMgaAjuVrecOQRl7d0LXF66SW4Sx/dcMWn4G8n8nkM7Fp2+U+36V1865zoN9flSgiKleSfgBcFREP9mvl0jtI+ni6JiNJHAV8giRJHAhcHBEHSmoE/gr8b6ADeBA4OSIe7Wt7bW1t0d7e3p8QAbh5zvN87hfzaG5oYGN3NxccP51jZuxayLKV6t8853n+7Wdz6Cz5YhnWnFyp3FN3a7a5rrOLru6gO33bmxrgog/MeG35Suv+8k0Pc819m3YqT5k5BYLN5jU2iO994C0EbPG3ZGlsECOaG1m1vrNyZbOt0NQAgejq3vK7r7FBiKBRYn1X0NwoNnYFjYKuSD6LG7tis2VPmTmF/XfbIddn8uY5z/PpG+aysWvT8r0/36V1865zoN9fPSTNioi2smU5k8SjwBuBZ4BXSc9JRMT0HMu2ArdmJIkfAXdHxHXp9OPAoUArcF5EvDud/3mSDX6rr20NJEm8vHo9bzv/96zbuOmbbFhzA3/63DsrZuT+Llup/sur13Pwt+9kfWf592RYcwO3nnkIR3//3q3aZm9Dm8Sfzz0coM/4Fi5Zxbu+l68nliGNDUA3G7pyVTd7XRvSyGb/6+U+k8nn+/esz/jV1Pu7IM93y9Z8f5XqK0nkvZnuSGBPkm443ktyCKmv51/ntSvwXMl0Rzova/4WJJ0hqV1S+7Jl/b8JvGP5WpobNm+G5oYGOpavrfqylep3LF9Lo7LfkuaGBuY898pWb7O3RiXLV4pvznOv9LmezQXK/e9l9vrW+3+93GeyY/laGhuUuY7e3wV5Pudb8/2VV65PcUQ8ExHPAGtJrmrqGbZWuRaLPuaXi+2yiGiLiLYJEyb0O4BJLcPZ2L15Zt/Y3f3acctqLlup/qSW4XRF9i/+jd3dzJg8dqu32VtXJMtXim/G5LF9rmdzIqjDg/FmBej9v17uMzmpZXjZQ1zllsn73bI131955X3G9TGSngCeBv4ALAJ+XYXtdwCTS6YnkdzJnTW/6saNHMoFx09nWHMDo4Y2May5gQuOn55rV62/y1aqP27kUC484S009XpXhjU3vFZ3r4mjtmqbzY2i9MdMUwNceMJbGDdyaMX49po4KjkHUeKUmVO2mNfYIL5z4nS+c+KMLf6WLI0NYtTQ3J0Smw1YUwOZv+gbG0RTAwxtTMqb09f0hWHNDVsse8rMKXznxBkVP5PJ53v6a+vsUfr5Lv0uyPM535rvr7zynpOYS3Ko6XcRsa+kw0hOJJ+RY9lWss9JvAc4k00nri+JiAMkNZGcuD4ceJ7kxPU/RMT8vrY10BPX4Kub+hOfr27y1U2+umnburqpGieu2yOiLU0W+0ZEt6QHIuKACstdR3IiejywhORJds0AEXFpegns94EjSC6BPT0i2tNljwL+k+T/9sqI+EalOLcmSZiZba/6ShJ59+9fkTQSuAe4VtJSoOK1ihFxcoXyAD6eUXYbcFvO+MzMrAB5Lz85luSX/idJOvZ7kupc3WRmZnUs757EGcANEdEBXF1gPGZmVkfy7kmMBm6X9EdJH5c0scigzMysPuS9T+KrEfFmkvMHuwB/kPS7QiMzM7Oa6+8tsUuBF4GXgR2rH46ZmdWTvDfT/Yuku4E7SS5n/WiefpvMzOz1Le+J692AcyJiToGxmJlZncn7jOtziw7EzMzqj7vpNDOzTE4SZmaWKe+J6zMltRQdjJmZ1Ze8exI7AQ9K+pmkI9KO+czMbBuX92a6LwFTgSuA04AnJH1T0p4FxmZmZjWW+5xE2mPri+nQCbQAP5d0QUGxmZlZjeW6BFbSWcCpwEvA5cBnImKjpAbgCeCzxYVoZma1kvdmuvHAcelzrl+TPnzo6OqHZWZm9SDvzXRfltQiaXrpMhExOyIWFBadmZnVVN7DTf8BnA48BfQ8sTdInnttZmbbqLyHmz4I7BkRG4oMxszM6kveq5seAcYWGIeZmdWhvHsS3wIekvQIsL5nZkQcU0hUZmZWF/ImiauB84GH2XROwszMtnF5k8RLEXFJoZGYmVndyZskZkn6FnALmx9uml1IVGZmVhfyJol909eDSub5Elgzs21c3pvpDis6EDMzqz95b6YbC5wCtLL5HddnFRKVmZnVhbyHm24D7sNXN5mZbVfyJolhEfGpQiMxM7O6k/eO6x9L+qiknSXt0DMUGpmZmdVc3iSxAbgQ+AswKx3a8yyYPu70cUkLJZ1bprxF0o2S5kl6QNI+JWWflDRf0iOSrpM0LGe8ZmZWBXmTxKeAvSKiNSJ2T4c9Ki0kqRH4AXAkMA04WdK0XtW+AMyJiOkkJ8cvTpfdFTgLaIuIfYBG4KSc8ZqZWRXkTRLzgTUDWP8BwMKIeCrtQfZ64NhedaYBdwJExGNAq6SJaVkTMFxSEzACWDyAGMzMbIDynrjuAuZIuovN77iudAnsrsBzJdMdwIG96swFjgPulXQAsBswKSJmSfoO8CywFrgjIu7IGa+ZmVVB3iRxUzr0l8rMi17T3wYuljSH5BLbh4BOSS0kex27A68AN0j6UET8ZLMNSGcAZwBMmTJlACGamVmWvHdcXz3A9XcAk0umJ9HrkFFErCR56h2SBDydDu8Gno6IZWnZL4GDgZ/0Wv4y4DKAtra23gnIzMy2Qt47rp9myz0Acpy8fhCYKml34HmSE8//0GvdY4E16TmLjwD3RMRKSc8CB0kaQXK46XByXlFlZmbVkfdwU1vJ+DDgRKDifRIR0SnpTOB2kquTroyI+ZI+lpZfCrwJuEZSF/Ao8OG07H5JPwdmA50kh6EuyxmvmZlVgSIGdoRG0r0RcUiV49kqbW1t0d7unQ0zs/6QNCsi2sqV5T3ctF/JZAPJnsWoKsRmZmZ1LO/hpu+WjHcCi4APVD0aMzOrK36ehJmZZeozSUjqs+fXiLiouuGYmVk9qbQn0XPeYW/grSTPuAZ4L3BPUUGZmVl96DNJRMRXASTdAewXEavS6fOAGwqPzszMaipvB39TSLoL77GB5FGmZma2Dct7ddOPgQck3Uhy5/X7gYF21WFmZq8Tea9u+oakXwNvT2edHhEPFReWmZnVg7x7EkTEbJIuMszMbDuR95yEmZlth5wkzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy+QkYWZmmZwkzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy+QkYWZmmZwkzMwsk5OEmZllcpIwM7NMThJmZpap8CQh6QhJj0taKOncMuUtkm6UNE/SA5L2KSkbK+nnkh6TtEDSzKLjNTOzTQpNEpIagR8ARwLTgJMlTetV7QvAnIiYDpwCXFxSdjHwm4j4O+AtwIIi4zUzs80VvSdxALAwIp6KiA3A9cCxvepMA+4EiIjHgFZJEyWNBt4BXJGWbYiIVwqO18zMShSdJHYFniuZ7kjnlZoLHAcg6QBgN2ASsAewDPhvSQ9JulzSG3pvQNIZktoltS9btqyIv8HMbLtVdJJQmXnRa/rbQIukOcAngIeATqAJ2A/4YUTsC7wKbHFOIyIui4i2iGibMGFCNWM3M9vuNRW8/g5gcsn0JGBxaYWIWAmcDiBJwNPpMALoiIj706o/p0ySMDOz4hS9J/EgMFXS7pKGACcBt5RWSK9gGpJOfgS4JyJWRsSLwHOS9k7LDgceLTheMzMrUeieRER0SjoTuB1oBK6MiPmSPpaWXwq8CbhGUhdJEvhwySo+AVybJpGnSPc4zMxscCii9ymC16+2trZob2+vdRhmZq8rkmZFRFu5Mt9xbWZmmZwkzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy+QkYWZmmZwkzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy+QkYWZmmZwkzMwsk5OEmZllcpIwM7NMThJmZpbJScLMzDI5SZiZWSYnCTMzy6SIqHUMVSNpGfDMIG1uPPDSIG2rv+o1tnqNC+o3tnqNC+o3tnqNC+o3tt0iYkK5gm0qSQwmSe0R0VbrOMqp19jqNS6o39jqNS6o39jqNS6o79iy+HCTmZllcpIwM7NMThIDd1mtA+hDvcZWr3FB/cZWr3FB/cZWr3FBfcdWls9JmJlZJu9JmJlZJicJMzPL5CTRB0knSpovqVtSW6+yz0taKOlxSe/OWH4HSb+V9ET62lJQnD+VNCcdFkmak1FvkaSH03rtRcTSa3vnSXq+JLajMuodkbbjQknnFh1Xus0LJT0maZ6kGyWNzag3KG1WqQ2UuCQtnydpv6Ji6bXdyZLukrQg/SycXabOoZJWlLzPXx6k2Pp8b2rYZnuXtMUcSSslndOrTk3abEAiwkPGALwJ2Bu4G2grmT8NmAsMBXYHngQayyx/AXBuOn4ucP4gxPxd4MsZZYuA8YPYfucBn65QpzFtvz2AIWm7ThuE2P4P0JSOn5/13gxGm+VpA+Ao4NeAgIOA+wfpPdwZ2C8dHwX8tUxshwK3Dtb/Vd73plZtVua9fZHkZrWat9lABu9J9CEiFkTE42WKjgWuj4j1EfE0sBA4IKPe1en41cD7Cgk0JUnAB4DritxOlR0ALIyIpyJiA3A9SbsVKiLuiIjOdPI+YFLR2+xDnjY4FrgmEvcBYyXtXHRgEfFCRMxOx1cBC4Bdi95uldSkzXo5HHgyIgarJ4iqc5IYmF2B50qmOyj/wZkYES9A8mEDdiw4rrcDSyLiiYzyAO6QNEvSGQXH0uPMdFf/yozDbXnbskj/TPKLs5zBaLM8bVDzdpLUCuwL3F+meKakuZJ+LenNgxRSpfem5m0GnET2j7ZatFm/NdU6gFqT9DtgpzJFX4yIm7MWKzOv0GuJc8Z5Mn3vRbwtIhZL2hH4raTHIuKeouICfgh8jaRtvkZyKOyfe6+izLJVacs8bSbpi0AncG3GaqreZuVCLTOvdxsM+v/cZhuXRgK/AM6JiJW9imeTHE5ZnZ53ugmYOghhVXpvat1mQ4BjgM+XKa5Vm/Xbdp8kIuJdA1isA5hcMj0JWFym3hJJO0fEC+lu7tKBxAiV45TUBBwH7N/HOhanr0sl3UhymGOrvvDytp+k/wJuLVOUty37LUebnQocDRwe6YHiMuuoepuVkacNCmunSiQ1kySIayPil73LS5NGRNwm6f9JGh8RhXZkl+O9qVmbpY4EZkfEkt4FtWqzgfDhpoG5BThJ0lBJu5P8Anggo96p6fipQNaeSTW8C3gsIjrKFUp6g6RRPeMkJ24fKTAeeh3/fX/G9h4EpkraPf3ldRJJuxVK0hHA54BjImJNRp3BarM8bXALcEp6xc5BwIqeQ5lFSs9zXQEsiIiLMurslNZD0gEk3ysvFxxXnvemJm1WInPPvhZtNmC1PnNezwPJF1sHsB5YAtxeUvZFkitSHgeOLJl/OemVUMA44E7gifR1hwJjvQr4WK95uwC3peN7kFw1MxeYT3LIpej2+zHwMDCP5AO7c++40umjSK6aeXIw4kq3uZDkePWcdLi0lm1Wrg2Aj/W8pySHTn6Qlj9MydV2BbfTISSHaOaVtNVRvWI7M22fuSQXARw8CHGVfW/qoc3SbY8g+dIfUzKvpm020MHdcpiZWSYfbjIzs0xOEmZmlslJwszMMjlJmJlZJicJMzPL5CRhVSWpVdJapT3RSpog6V5Jj0h6X0m9myXt0s/1FnpfR16SPibplCqt6ywlPaxeK+l9kqZt5frGKem1dbWk71cjxozttEm6pJ/LLJI0XtLwtOfTDZLGFxWjVcd2f8e1FeLJiJiRjp9M0rnh9cBvgJskvZfkTtTBvPu1aiLi0iqu7l9J7rN5WtJVJHelP5p3YUlNsamjQoB1wL8D+6RD1aXbbAcG1HV6RKwFZkhaVNXArBDek7CibQSGk3Sr3p12H3IOcGHWApImKnnGw9x0ODgtapT0X0qea3CHpOFp/Y9KejCt+wtJI9L5Vyl5nsCfJT0l6YR0fkPaDcJ8SbdKuq2kbH9Jf1DSadztKtNrqJLnZHw6Hb9b0vmSHpD0V0lvL1N/pKQ7Jc1W8vyDY9P5l5LcFHaLkj6kjgEuTH9l75kOv0lj+aOkvyv5uy6SdBdJN+eviYhXI+JekmSRKf1V3xP3A5L2SudPSNvwwXR4W8nffJmkO4BrlDwP4da0bAdJNynpyPE+SdPT+ePS9+khST+ifF9KVu9qfTefh21rAFqBR0qmxwC/IvnVeThwFnBqhXX8lKQjOUj64x+TrrcTmJHO/xnwoXR8XMmyXwc+kY5fBdxA8mNoGkl33AAnALel83cClqfzmoE/AxPSeh8EriwT33mkz8kgedbId9Pxo4DflanfBIxOx8eT3O3dcyPrItJnIqTxnlCy3J3A1HT8QOD3JfVupcwzTEqWPQ34fh/li9h0l/IppM82AP4HOCQdn0LSHUfP3zwLGJ5OH1qyzP8FvpKOvxOYk45fQvpsE+A9JHduj+8Vw6A938TDwAYfbrJCRcQKki8IlHQV/jngOCUd/rWQfMH+pddi7yT54iIiuoAV6bJPR8SctM4sksQBsI+krwNjgZHA7SXruikiuoFHJU1M5x0C3JDOfzH9RQ7JA6b2IelRFJIElaevn55O70pjKiXgm5LeAXSTdFc9keRhNGUp6XX1YOCGNBZI9sZ63JC2zda4ruT1e+n4u4BpJdscrbSPJOCWSA4V9XYIcDxARPw+3YMYA7yDpNNJIuJXkpZvZbxWA04SNpi+DHyD5DzFLJJfrTcDh+Vcfn3JeBfJYSxIflm/LyLmSjqN5FduuWXU67U3AfMjYmbOeHpvo4vyn6l/BCYA+0fExvRY/LAK62wAXolN53Z6e7WfMZYTZcYbgJm9k0GaNLK22VeX3O7353XO5yRsUEiaCuwSEX8g6fysm+QLpNyX5Z3Av6TLNUoaXWH1o4AXlHRp/Y85wrkXOD49NzGRTUnlcWCCpJnptptVnYfBjAGWpgniMGC3jHqrSP4WIulK+mlJJ6axSNJbqhBLqQ+WvPbszd1B0vkc6XZn5FjPPaTtLulQ4KU0/tL5R5LsOdrrjJOEDZZvAF9Kx68jOWZ+H/CdMnXPBg6T9DDJHkelL+p/J3la2m+Bx3LE8guS3n0fAX6ULrsikkeHngCcL2kuSY+nB2etpB+uBdoktZN8aWbFeD3wmfRE755p3Q+nscwn52Nd0z2Vi4DTJHUo+7LaoZLuJ2nvT6bzzkpjnSfpUZKeSys5r2cZ4Nts6h7/q8A7JM0m6cr72TzxW31xL7BWVUoecXlrRBRy+WW1SBoZyVPBxpE8C+RtEZF5jmBbkyaStqjhQ27qIQarzOckrNq6gDGS5vRxPL0e3CppLDAE+Nr2lCBqTcmly38huZqsu8bhWAXekzAzs0w+J2FmZpmcJMzMLJOThJmZZXKSMDOzTE4SZmaW6f8DczbK4bevingAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Regression_data_Charlie = Regression_data.loc[Regression_data['Counterparty'] == 'Charlie the Chad']\n",
    "Regression_data_Charlie_buy = Regression_data_Charlie.loc[Regression_data['dummy variable_buy'] == 1]\n",
    "ax1 = Regression_data_Charlie_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 1 period'])\n",
    "Regression_data_Charlie_sell = Regression_data_Charlie.loc[Regression_data['dummy variable_buy'] == 0]\n",
    "ax2 = Regression_data_Charlie_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 1 period'])\n",
    "\n",
    "ax3 = Regression_data_Charlie_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 3 period'])\n",
    "Regression_data_Charlie_sell = Regression_data_Charlie.loc[Regression_data['dummy variable_buy'] == 0]\n",
    "ax4 = Regression_data_Charlie_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 3 period'])\n",
    "\n",
    "ax5 = Regression_data_Charlie_buy.plot.scatter(y='dummy variable_buy',x=['% change in after 5 period'])\n",
    "Regression_data_Charlie_sell = Regression_data_Charlie.loc[Regression_data['dummy variable_buy'] == 0]\n",
    "ax6 = Regression_data_Charlie_sell.plot.scatter(y='dummy variable_sell',x=['% change in after 5 period'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6747033",
   "metadata": {},
   "source": [
    "**Charlie: <br><br>Run for buy, after 1 period, after 3 period, after 5 period**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "8ca5f624",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:29:44   Log-Likelihood:                -2212.5\n",
      "No. Observations:                         987   AIC:                             4427.\n",
      "Df Residuals:                             986   BIC:                             4432.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "dummy variable_buy     0.0378      0.073      0.522      0.602      -0.104       0.180\n",
      "==============================================================================\n",
      "Omnibus:                       64.641   Durbin-Watson:                   2.045\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              247.967\n",
      "Skew:                          -0.154   Prob(JB):                     1.43e-54\n",
      "Kurtosis:                       5.436   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 1 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:29:44</td>          <th>  Log-Likelihood:    </th> <td> -2212.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   987</td>           <th>  AIC:               </th> <td>   4427.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   986</td>           <th>  BIC:               </th> <td>   4432.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_buy</th> <td>    0.0378</td> <td>    0.073</td> <td>    0.522</td> <td> 0.602</td> <td>   -0.104</td> <td>    0.180</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>64.641</td> <th>  Durbin-Watson:     </th> <td>   2.045</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 247.967</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.154</td> <th>  Prob(JB):          </th> <td>1.43e-54</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.436</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:29:44   Log-Likelihood:                -2212.5\n",
       "No. Observations:                         987   AIC:                             4427.\n",
       "Df Residuals:                             986   BIC:                             4432.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "dummy variable_buy     0.0378      0.073      0.522      0.602      -0.104       0.180\n",
       "==============================================================================\n",
       "Omnibus:                       64.641   Durbin-Watson:                   2.045\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              247.967\n",
       "Skew:                          -0.154   Prob(JB):                     1.43e-54\n",
       "Kurtosis:                       5.436   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Charlie_buy['dummy variable_buy']\n",
    "y = Regression_data_Charlie_buy['% change in after 1 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "b4be7403",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 3 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:55:44   Log-Likelihood:                -2710.9\n",
      "No. Observations:                         987   AIC:                             5424.\n",
      "Df Residuals:                             986   BIC:                             5429.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "dummy variable_buy     0.1546      0.120      1.287      0.198      -0.081       0.390\n",
      "==============================================================================\n",
      "Omnibus:                       71.672   Durbin-Watson:                   1.238\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              295.910\n",
      "Skew:                          -0.180   Prob(JB):                     5.55e-65\n",
      "Kurtosis:                       5.658   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 3 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:55:44</td>          <th>  Log-Likelihood:    </th> <td> -2710.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   987</td>           <th>  AIC:               </th> <td>   5424.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   986</td>           <th>  BIC:               </th> <td>   5429.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_buy</th> <td>    0.1546</td> <td>    0.120</td> <td>    1.287</td> <td> 0.198</td> <td>   -0.081</td> <td>    0.390</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>71.672</td> <th>  Durbin-Watson:     </th> <td>   1.238</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 295.910</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.180</td> <th>  Prob(JB):          </th> <td>5.55e-65</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.658</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 3 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:55:44   Log-Likelihood:                -2710.9\n",
       "No. Observations:                         987   AIC:                             5424.\n",
       "Df Residuals:                             986   BIC:                             5429.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "dummy variable_buy     0.1546      0.120      1.287      0.198      -0.081       0.390\n",
       "==============================================================================\n",
       "Omnibus:                       71.672   Durbin-Watson:                   1.238\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              295.910\n",
       "Skew:                          -0.180   Prob(JB):                     5.55e-65\n",
       "Kurtosis:                       5.658   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Charlie_buy['dummy variable_buy']\n",
    "y = Regression_data_Charlie_buy['% change in after 3 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "82c3d340",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:55:52   Log-Likelihood:                -2965.5\n",
      "No. Observations:                         986   AIC:                             5933.\n",
      "Df Residuals:                             985   BIC:                             5938.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "dummy variable_buy     0.3280      0.156      2.102      0.036       0.022       0.634\n",
      "==============================================================================\n",
      "Omnibus:                       77.829   Durbin-Watson:                   0.885\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              402.675\n",
      "Skew:                          -0.030   Prob(JB):                     3.63e-88\n",
      "Kurtosis:                       6.130   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 5 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:55:52</td>          <th>  Log-Likelihood:    </th> <td> -2965.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   986</td>           <th>  AIC:               </th> <td>   5933.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   985</td>           <th>  BIC:               </th> <td>   5938.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_buy</th> <td>    0.3280</td> <td>    0.156</td> <td>    2.102</td> <td> 0.036</td> <td>    0.022</td> <td>    0.634</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>77.829</td> <th>  Durbin-Watson:     </th> <td>   0.885</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 402.675</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.030</td> <th>  Prob(JB):          </th> <td>3.63e-88</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.130</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:55:52   Log-Likelihood:                -2965.5\n",
       "No. Observations:                         986   AIC:                             5933.\n",
       "Df Residuals:                             985   BIC:                             5938.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "dummy variable_buy     0.3280      0.156      2.102      0.036       0.022       0.634\n",
       "==============================================================================\n",
       "Omnibus:                       77.829   Durbin-Watson:                   0.885\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              402.675\n",
       "Skew:                          -0.030   Prob(JB):                     3.63e-88\n",
       "Kurtosis:                       6.130   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Charlie_buy['dummy variable_buy']\n",
    "y = Regression_data_Charlie_buy['% change in after 5 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "25b7eabc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.03784180936233908, 0.15462164429885167, 0.3280364014010089]"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=Regression_data_Charlie_buy['% change in after 1 period'].mean()\n",
    "b=Regression_data_Charlie_buy['% change in after 3 period'].mean()\n",
    "c=Regression_data_Charlie_buy['% change in after 5 period'].mean()\n",
    "\n",
    "Reg_Charlie = [a,b,c]\n",
    "Reg_Charlie"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a1caccf",
   "metadata": {},
   "source": [
    "**Charlie: <br><br>Run for sell, after 1 period, after 3 period, after 5 period**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "9136c55d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:55:56   Log-Likelihood:                -2221.2\n",
      "No. Observations:                         980   AIC:                             4444.\n",
      "Df Residuals:                             979   BIC:                             4449.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell     0.1366      0.075      1.832      0.067      -0.010       0.283\n",
      "==============================================================================\n",
      "Omnibus:                       66.307   Durbin-Watson:                   1.980\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              284.829\n",
      "Skew:                          -0.075   Prob(JB):                     1.41e-62\n",
      "Kurtosis:                       5.637   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 1 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:55:56</td>          <th>  Log-Likelihood:    </th> <td> -2221.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   980</td>           <th>  AIC:               </th> <td>   4444.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   979</td>           <th>  BIC:               </th> <td>   4449.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>    0.1366</td> <td>    0.075</td> <td>    1.832</td> <td> 0.067</td> <td>   -0.010</td> <td>    0.283</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>66.307</td> <th>  Durbin-Watson:     </th> <td>   1.980</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 284.829</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.075</td> <th>  Prob(JB):          </th> <td>1.41e-62</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.637</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 1 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:55:56   Log-Likelihood:                -2221.2\n",
       "No. Observations:                         980   AIC:                             4444.\n",
       "Df Residuals:                             979   BIC:                             4449.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell     0.1366      0.075      1.832      0.067      -0.010       0.283\n",
       "==============================================================================\n",
       "Omnibus:                       66.307   Durbin-Watson:                   1.980\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              284.829\n",
       "Skew:                          -0.075   Prob(JB):                     1.41e-62\n",
       "Kurtosis:                       5.637   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Charlie_sell['dummy variable_sell']\n",
    "y = Regression_data_Charlie_sell['% change in after 1 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "49c1e56c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 3 period   R-squared:                      -0.000\n",
      "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:30:34   Log-Likelihood:                -2753.2\n",
      "No. Observations:                         978   AIC:                             5508.\n",
      "Df Residuals:                             977   BIC:                             5513.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell     0.4028      0.129      3.116      0.002       0.149       0.656\n",
      "==============================================================================\n",
      "Omnibus:                       71.093   Durbin-Watson:                   1.377\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              330.604\n",
      "Skew:                          -0.067   Prob(JB):                     1.62e-72\n",
      "Kurtosis:                       5.845   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 3 period</td> <th>  R-squared:         </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>  -0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:30:34</td>          <th>  Log-Likelihood:    </th> <td> -2753.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   978</td>           <th>  AIC:               </th> <td>   5508.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   977</td>           <th>  BIC:               </th> <td>   5513.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>    0.4028</td> <td>    0.129</td> <td>    3.116</td> <td> 0.002</td> <td>    0.149</td> <td>    0.656</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>71.093</td> <th>  Durbin-Watson:     </th> <td>   1.377</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 330.604</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.067</td> <th>  Prob(JB):          </th> <td>1.62e-72</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.845</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 3 period   R-squared:                      -0.000\n",
       "Model:                                    OLS   Adj. R-squared:                 -0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:30:34   Log-Likelihood:                -2753.2\n",
       "No. Observations:                         978   AIC:                             5508.\n",
       "Df Residuals:                             977   BIC:                             5513.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell     0.4028      0.129      3.116      0.002       0.149       0.656\n",
       "==============================================================================\n",
       "Omnibus:                       71.093   Durbin-Watson:                   1.377\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              330.604\n",
       "Skew:                          -0.067   Prob(JB):                     1.62e-72\n",
       "Kurtosis:                       5.845   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Charlie_sell['dummy variable_sell']\n",
    "y = Regression_data_Charlie_sell['% change in after 3 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "7259afde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                OLS Regression Results                                \n",
      "======================================================================================\n",
      "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
      "Model:                                    OLS   Adj. R-squared:                  0.000\n",
      "Method:                         Least Squares   F-statistic:                       nan\n",
      "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
      "Time:                                15:30:44   Log-Likelihood:                -2989.6\n",
      "No. Observations:                         978   AIC:                             5981.\n",
      "Df Residuals:                             977   BIC:                             5986.\n",
      "Df Model:                                   0                                         \n",
      "Covariance Type:                    nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "dummy variable_sell     0.4665      0.165      2.835      0.005       0.144       0.789\n",
      "==============================================================================\n",
      "Omnibus:                       75.376   Durbin-Watson:                   1.006\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              377.506\n",
      "Skew:                          -0.045   Prob(JB):                     1.06e-82\n",
      "Kurtosis:                       6.042   Cond. No.                         1.00\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>% change in after 5 period</td> <th>  R-squared:         </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                        <td>OLS</td>            <th>  Adj. R-squared:    </th> <td>   0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                  <td>Least Squares</td>       <th>  F-statistic:       </th> <td>     nan</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>                  <td>Sun, 27 Mar 2022</td>      <th>  Prob (F-statistic):</th>  <td>   nan</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                      <td>15:30:44</td>          <th>  Log-Likelihood:    </th> <td> -2989.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>           <td>   978</td>           <th>  AIC:               </th> <td>   5981.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>               <td>   977</td>           <th>  BIC:               </th> <td>   5986.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                   <td>     0</td>           <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>           <td>nonrobust</td>         <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dummy variable_sell</th> <td>    0.4665</td> <td>    0.165</td> <td>    2.835</td> <td> 0.005</td> <td>    0.144</td> <td>    0.789</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>75.376</td> <th>  Durbin-Watson:     </th> <td>   1.006</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 377.506</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.045</td> <th>  Prob(JB):          </th> <td>1.06e-82</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.042</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                OLS Regression Results                                \n",
       "======================================================================================\n",
       "Dep. Variable:     % change in after 5 period   R-squared:                       0.000\n",
       "Model:                                    OLS   Adj. R-squared:                  0.000\n",
       "Method:                         Least Squares   F-statistic:                       nan\n",
       "Date:                        Sun, 27 Mar 2022   Prob (F-statistic):                nan\n",
       "Time:                                15:30:44   Log-Likelihood:                -2989.6\n",
       "No. Observations:                         978   AIC:                             5981.\n",
       "Df Residuals:                             977   BIC:                             5986.\n",
       "Df Model:                                   0                                         \n",
       "Covariance Type:                    nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "dummy variable_sell     0.4665      0.165      2.835      0.005       0.144       0.789\n",
       "==============================================================================\n",
       "Omnibus:                       75.376   Durbin-Watson:                   1.006\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              377.506\n",
       "Skew:                          -0.045   Prob(JB):                     1.06e-82\n",
       "Kurtosis:                       6.042   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x= Regression_data_Charlie_sell['dummy variable_sell']\n",
    "y = Regression_data_Charlie_sell['% change in after 5 period']\n",
    "result = smf.OLS(y, x, missing = 'drop').fit()\n",
    "print(result.summary())\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "5c29be57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.13663081013378037, 0.4027595758682052, 0.46651643541643767]"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=Regression_data_Charlie_sell['% change in after 1 period'].mean()\n",
    "b=Regression_data_Charlie_sell['% change in after 3 period'].mean()\n",
    "c=Regression_data_Charlie_sell['% change in after 5 period'].mean()\n",
    "\n",
    "Reg_Charlie = [a,b,c]\n",
    "Reg_Charlie"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f216516",
   "metadata": {},
   "source": [
    "<font size=\"5\">**Thoughts for improvement**</font> <br><br>\n",
    "    Solicit bids and offers from other OTC MMs once OTC deal is completed, To check if price adversely changes after OTC Deal\n",
    "        \n",
    "Include data when counterparties submit queries but did not execute\n",
    "\n",
    "<br><br>\n",
    "\n",
    "\"“If you see four client trades executed with no regard to the post-trade market impact and find you’re offside in less than a second, then OK – it gives you a high \n",
    "degree of confidence, even if you don’t have a large number of trades. But if you’re ending up offside after 25 minutes, then you need a lot of them to draw any conclusions,” says Chris Purves, head of UBS Investment Bank’s strategic development lab in London.\"\n",
    "\n",
    "<br>\n",
    "https://www.risk.net/derivatives/5750516/hunt-for-toxic-flow-hits-one-of-bankings-old-problems\n",
    "\n",
    "   \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
